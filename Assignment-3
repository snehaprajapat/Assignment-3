Design and Build Objects of types Individual, AU_Employee, Faculty, EN_Faculty and
Design_Faculty as schematically represented below in Figure-01
Figure-01
Class Individual -
Attributes
This class must take name as an instance variable and birthday to be of None type
Functions- get_name, add_birthday , get_age and __str__(Individual)
Class AU_Employee
Attributes
The role of this class is to provide an unique identification for an employee in the Organization
Functions
Function- get_unique_id
Class Faculty
It inherits everything from the class AU_Employee
Class EN_Faculty
Attributes
This class has to take two data attributes name and classroom_year
Function
Assigning class/batch to the Faculty
Design a new class Roster_AU( )
The role of this class is to assign faculty a course for given academic term
Attributes of this class are:
Empty list consist of Faculty
Courses assigned to Empty Dictionary
Functionalities this class must have;
add_faculty
“”” Assumes: faculty is of type Faculty add faculty to the empty dictionary created as an object in
data attributes “””
Avoid duplicity of Objects in this case
add_course
“”” Assumes: Course as a string add courses to the list of courses for faculty ”””
If faculty not in mapping raise an Error
get_courses
“”” Returns a list of courses for a faculty “””
Finally return sorted list of faculties from the allotted course dictionary

from datetime import datetime

class Individual():
    def __init__(self, name):
        self.name = name
        self.birthday = None

    def get_name(self):
        return self.name

    def add_birthday(self, birthday):
        self.birthday = birthday

    def get_age(self):
        today = datetime.now().date()
        age = today.year - self.birthday.year
        return age

    def __str__(self):
        return f'Name : {self.name}, Birthday : {self.birthday}'

class AU_Employee(Individual):
    _new_enroll = 1
    
    def __init__(self, name):
        super().__init__(name)
        self.id = AU_Employee._new_enroll
        AU_Employee._new_enroll += 1
        self._strval = 'AU23B100' + str(self.id)
    
    def get_unique_id(self):
        return self._strval

class Faculty(AU_Employee):
    pass

class EN_Faculty(Faculty):
    def __init__(self, name, classroom_year):
        super().__init__(name)
        self.classroom_year = classroom_year

    def assign_class(self):
        return self.classroom_year 

class Roster_AU():
    def __init__(self):
        self.faculties = []
        self.course_assign = {}

    def add_faculty(self, faculty):
        if faculty not in self.faculties:
            self.faculties.append(faculty)
            self.course_assign[faculty] = []
        else:
            raise ValueError("Faculty already exists in the roster.")

    def add_course(self, faculty, course):
        if faculty not in self.course_assign:
            raise ValueError("Faculty not in mapping")
        self.course_assign[faculty].append(course)

    def get_courses(self, faculty):
        if faculty not in self.course_assign:
            raise ValueError("Faculty not in mapping")
        return self.course_assign[faculty]

    def get_sorted_faculties(self):
        def sort_key(faculty):
            return faculty.get_name()
        
        return sorted(self.course_assign.keys(), key=sort_key)

    def get_sorted_faculties_with_courses(self):
        sorted_faculties = self.get_sorted_faculties()
        faculties_with_courses = {}
        for faculty in sorted_faculties:
            courses = self.get_courses(faculty)
            faculties_with_courses[faculty] = courses
        return faculties_with_courses

faculty1 = EN_Faculty("Rushikesh Pawar", 2024)
faculty2 = EN_Faculty("Rahul Thakur", 2024)
faculty3 = EN_Faculty("Varshali Jaiswal", 2024)

roster = Roster_AU()

roster.add_faculty(faculty1)
roster.add_faculty(faculty2)
roster.add_faculty(faculty3)

roster.add_course(faculty1, "ITC")
roster.add_course(faculty1, "DT")
roster.add_course(faculty2, "POE")
roster.add_course(faculty3, "FOP")
print("Faculties with Courses:")
for faculty in roster.get_sorted_faculties_with_courses():
    print(f"{faculty.get_name()}: {roster.get_courses(faculty)}")